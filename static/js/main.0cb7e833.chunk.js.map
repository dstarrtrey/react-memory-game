{"version":3,"sources":["helpers.js","components/ScoreHeader.js","components/Rules.js","components/Image.js","components/Game.js","App.js","index.js"],"names":["shuffleArr","arr","newArr","Array","length","fill","x","empties","reduce","a","e","i","push","Math","floor","random","Header","styled","header","_templateObject","props","theme","red","white","black","Title","h1","_templateObject2","Message","span","_templateObject3","offWhite","grey","Score","_templateObject4","ScoreHeader","children","score","topScore","react_default","createElement","StyledRules","div","Rules_templateObject","Rules","StyledBox","Image_templateObject","bs","lightGrey","StyledImg","img","Image_templateObject2","Image","_props$image","image","name","id","onClick","handleClick","alt","img-id","src","StyledGame","Game_templateObject","maxWidth","Game","images","map","components_Image","key","GlobalStyle","createGlobalStyle","App_templateObject","App","_useState","useState","_useState2","Object","slicedToArray","pickedImages","setPickedImages","_useState3","_useState4","setTopScore","_useState5","_useState6","headerMsg","setHeaderMsg","_useState7","toConsumableArray","initialImages","_useState8","setImages","gameOver","win","arguments","undefined","concat","styled_components_browser_esm","className","components_ScoreHeader","components_Rules","components_Game","pickedId","includes","picked","correctAnswer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0cb7e833.chunk.js","sourcesContent":["export const shuffleArr = arr => {\n  // Initializes new array with falsy values and loops over it\n  const newArr = new Array(arr.length).fill(false);\n  for (let x = 0; x < newArr.length; x++) {\n    // With each loop generates new array of indexes with falsy values\n    const empties = newArr.reduce((a, e, i) => {\n      // Does not push current value to accumulator if truthy\n      e || a.push(i);\n      return a;\n    }, []);\n    // Random index from array of newArr's empty indexes\n    const rand = empties[Math.floor(Math.random() * empties.length)];\n    // Sets the empty index to the current index of input array\n    newArr[rand] = arr[x];\n  }\n  return newArr;\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Header= styled.header`\n  background-color: ${props => props.theme.red};\n  margin: 0;\n  padding: 0;\n  color: ${props => props.theme.white};\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  align-items: center;\n  border-bottom: 4px solid ${props => props.theme.black};\n`;\n\nconst Title = styled.h1`\n  font-size: 5rem;\n  transform: skew(-20deg);\n  text-align: center;\n`;\n\nconst Message = styled.span`\n  font-size: 3rem;\n  text-align: center;\n  color: ${props => props.theme.offWhite};\n  border-left: 2px solid ${props => props.theme.grey};\n  border-right: 2px solid ${props => props.theme.grey};\n`;\n\nconst Score = styled.span`\n  text-align: right;\n  font-size: 2rem;\n  padding-right: 10%\n`;\nconst ScoreHeader = props => {\n  const { children, score, topScore } = props;\n  return (\n    <Header>\n      <Title>Clicky Game</Title>\n      <Message>\n        {children}\n      </Message>\n      <Score>\n        Score: {score} | Top Score: {topScore}\n      </Score>\n    </Header>\n  );\n};\n\nexport default ScoreHeader;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledRules = styled.div`\n  margin: 0;\n  padding: 1rem;\n  background-color: ${props => props.theme.grey};\n  color: ${props => props.theme.offWhite}\n  text-align: center;\n  border-bottom: 3px solid ${props => props.theme.black};\n  h1 {\n    font-size: 4rem;\n  }\n  p {\n    font-size: 3rem;\n  }\n`;\n\nconst Rules = () => {\n  return (\n    <StyledRules>\n      <h1>Clicky Game!</h1>\n      <p>Click on an image to earn points, but don't click on any more than once!</p>\n    </StyledRules>\n  );\n};\n\nexport default Rules;","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledBox = styled.div`\n  box-shadow: ${props => props.theme.bs};\n  display: grid;\n  align-items: center;\n  justify-items: center;\n  background-color: white;\n  margin: 2rem;\n  height: 100%;\n  border: 4px solid ${props => props.theme.lightGrey};\n  border-radius: 3%;\n  transform: scale(1);\n  transition: .15s all ease-in-out;\n  &:hover {\n    box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.2);\n    transform: scale(1.03);\n  }\n`;\n\nconst StyledImg = styled.img`\n  max-width: 100%;\n  max-height: 30rem;\n`;\nconst Image = props => {\n  const { name, id, image } = props.image;\n  return (\n    <StyledBox onClick={() => props.handleClick(id)}>\n      <StyledImg\n        alt={name}\n        img-id={id}\n        src={image}\n      />\n    </StyledBox>\n  );\n};\n\nexport default Image;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Image from './Image';\n\nconst StyledGame = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-row-gap: 1rem;\n  align-items: center;\n  max-width: ${props => props.theme.maxWidth};\n  margin: 5rem auto;\n`;\n\nconst Game = props => {\n  return (\n    <StyledGame>\n      {props.images.map(image => (\n        <Image\n          key={image.id}\n          image={image}\n          handleClick={props.handleClick}\n        />\n      ))}\n    </StyledGame>\n  );\n};\n\nexport default Game;","import React, { useState } from 'react';\nimport initialImages from './images.json';\nimport { shuffleArr } from './helpers';\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport ScoreHeader from './components/ScoreHeader';\nimport Rules from './components/Rules';\nimport Game from './components/Game';\n\nconst theme = {\n  red: '#FF0000',\n  white: '#f0f0f0',\n  black: '#1b1b1b',\n  grey: '#3A3A3A',\n  lightGrey: '#E1E1E1',\n  offWhite: '#EDEDED',\n  maxWidth: '1000px',\n  bs: '0 12px 24px 0 rgba(0, 0, 0, 0.09)', \n}\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n    font-size: 10px;\n  }\n  *, *:before, *:after {\n    box-sizing: inherit;\n  }\n  body {\n    padding: 0;\n    margin: 0;\n    font-size: 1.5rem;\n    line-height: 2;\n    font-family: 'arial';\n    background-color: ${theme.offWhite}\n  }\n`;\n\nfunction App() {\n  const [ pickedImages, setPickedImages ] = useState([]);\n  const [ topScore, setTopScore ] = useState(0);\n  const [ headerMsg, setHeaderMsg ] = useState('Click an image to begin');\n  const [ images, setImages ] = useState(shuffleArr([...initialImages]));\n\n  const gameOver = (win = false) => {\n    const score = pickedImages.length;\n    win ? \n      setHeaderMsg('You won! Play again by clicking an image.')\n      : setHeaderMsg(`You lost. Your score was ${score}. Click an image to play again.`);\n    if (score > topScore) {\n      setTopScore(score);\n    }\n    setPickedImages([]);\n  }\n  \n  const correctAnswer = picked => {\n    setPickedImages([...pickedImages, picked]);\n    const score = pickedImages.length;\n    if (score === 0) {\n      setHeaderMsg(\"Good luck!\")\n    } else if (score === images.length - 1) {\n      gameOver(true);\n    } else {\n      setHeaderMsg(\"Correct! Pick another image.\");\n    }      \n  }\n\n  const handleClick = pickedId => {\n    setImages(shuffleArr(initialImages))\n    pickedImages.includes(pickedId)\n      ? gameOver()\n      : correctAnswer(pickedId);\n  }\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <ScoreHeader score={pickedImages.length} topScore={topScore}>\n          {headerMsg}\n        </ScoreHeader>\n        <Rules />\n        <Game\n          images={images}\n          pickedImages={pickedImages}\n          handleClick={handleClick}\n        />\n        <GlobalStyle />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}